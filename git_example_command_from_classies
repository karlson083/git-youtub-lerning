3.5 перенос веток
git branch fix
git checkout fix
git branch -f master 54a4 ##принудительный перенос ветки мастер на нужный коммит
git branch -f master fix
git checkout -b master 54a5 ##создать ветку на опредленном коммите
git checkout -B master 54a5 ##перенсти созданную ветку на опредленный коммит

3.6 отделенный head (detech HEAD)
git checkout 1319
git cherrypic ##если закоммитили то что должно было быть в другой ветке

3.7 восстановление предыдущих файлов
git checkout master index.html
git checkout HEAD index.html ##восставновить файл из текущей ветки
git reset index.html ## убрать index.html из index оставить только в working directory


3.8 Просмотр истории и старых файлов, символы ~, ^, @, поиск с :/
git log
git log --oneline
git log fix --oneline
git show master
git show 6e23
git show HEAD~ ##показать коммит родителя
git show HEAD~~ --quaiet ##показать коммит родитея родитея в коротком варианте без видимости изминений
git show HEAD~2 --quaiet ##показать коммит родитея родитея в коротком варианте без видимости изминений
git show @~2 --quaiet ##показать коммит родитея родитея в коротком варианте без видимости изминений
git show 6e23:index.html ##Показать файл бывший в определенном коммите
git show :/add ## показать коммит с поиском по описанию в коммите покажет последний соответствующий отбору

3.9 Слияние веток "перемоткой"
git checkuout master

3.10 Удаление веток
git branch -d fix
git branch -D features
git branch master2 1de0eab

3.11 История переключений веток: лог ссылок reflog
git reflog
git branch features HEAD@{6}
git reflog --date=iso
git chekout @{-1} ##переключиться на ветку с которой перешли на текущую
git checkout - ##переключиться на ветку с которой перешли на текущую

4.1 Удаление "лишних" файлов и незакоммиченных изменений
git checkout -f ##Сброс до текущего комита
git reset --hard ##Сброс до текущего комита
git clean ## Очистка от untrackt files
git clean -dxf ## Удаление файлов и директорий в том числе игнорируемые гит игнор принудительно

5.1 Reset – Жесткий reset --hard: отмена изменений, удаление коммитов

5.2 Reset – Мягкий reset --soft: замена и объединение коммитов

5.3 Reset – Правка последнего коммита: commit --amend
git commit --amend

5.4 Reset – Смешанный reset (без флагов), сравнение видов reset

git reset --mixed

5.5 Reset – Таблица с действиями reset

man git reset

6.1 Просмотр – Сравнение коммитов, веток и не только: git diff

git diff master features # Сравнение двух веток
git diff master...features # Вывод всх изминений с момента отдления ветки от ветки
git diff # сравнение "Working Directory" with "Index"
git diff HEAD # сравнение "Working Directory" with Repository "(Head)"
git diff @ # сравнение "Working Directory" with Repository "(Head)"  (   @   тоже самое что HEAD)
git diff --cached # сравнение "Index" with Repository "(Head)"   (--cached озночает что нужно брать для сравнения Index  а не "Working Directory")

git commit -v # Покажет какие изминения будут внесены при коммите в текстовом редакторе
git config --global commit.verbose true # Выставить по умолчанию показывать какие изминения будут внесены при коммите в текстовом редакторе
git diff ... -- <path> # -- <path> указывает что это указание пути или файла но не ветка, для случаев когда проекте есть папки с идентичными именами как ветки проекта
git diff --name-only # Вывод только имен файлов в которых есть изминения для случаев когда изминений очень много



6.2 Git – Просмотр – Вывод истории: git log, форматирование коммитов

git log # Выводит коммиты достижимые из HEAD в обратном хронологическом порядке, вверху новые
git log --pretty=oneline # Режим вывода лога для однострочного вывода (по умолчанию medium)
git log --pretty=oneline --abbrev-commit # .. для вывода с короткими идентификаторами коммитов
git log --oneline # тоже что выше только  одной командой
git log --oneline --no-decorate #Вывод без декораторов

git help log

git log --pretty=format:'%h %cd | %s%d [%an]' # Варианты форматирования вывода см. git help log
git log --pretty=format:'%h %cr | %s%d [%an]'
git log --pretty=format:'%h %cd | %s%d [%an]' --date=short # Вариант форматирования с коротким выводом даты
git log --pretty=format:'%h %cd | %s%d [%an]' --date=format:'%F %R' #Вариант для изминения форматирования вывода даты времени см. strftimr (вспомогательная функиция которую изпользует git но не описано в git log)
git log --pretty=format:'%C(yellow)%h %C(red)%cd %C(dim green)| %C(cyan)%s%d %C(#667788)[%an]' --date=format:'%F %R' #Вариант с форматирование цвета вывода (%С) см. git help config
git log --pretty=format:'%C(yellow)%h %C(red)%cd %C(dim green)| %C(cyan)%s%C(red)%d' --date=format:'%F %R'
git config --global pretty.my format:'%C(yellow)%h %C(red)%cd %C(dim green)| %C(cyan)%s%C(red)%d' # Для сохранения формата под именем my
git log --pretty=my # для использования своего формата вывода лога
git config --global format.pretty my #Для использования по умолчанию для вывода лога формата my
git config --global log.date format:'%F %R' # Настройка вывода формата времени по умолчанию


git log -p #Вывод коммитов с содержимым того что было сделано 


6.3 Git – Просмотр – Диапазоны коммитов для git log и не только

git log master features --graph # Вывод лога достижимых коммитов опреденных веток (можно несколько) с консольным "деревом" веток
git log --all --graph # Вывод всех достижимых коммитов с консольным "деревом" веток
git log fix ^master  #Вывод коммитов ветки fix без коммитов ветки master (используется для сложных исключений и сложных проектов) чаще используется команда ниже
git log master..fix #Вывод коммитов ветки fix без коммитов ветки master (вывод ветки fix после отхождения от master)
git log ..fix # Сокращенный Вариант для команды выше если master это HEAD
git log ..fix --boundary #То же что выше + пограничный от которого пошло ветвление
git log master...fix --boundary --graph #Вывод коммитов достижимых из одной и другой ветки но не из обоих + пограничный коммит + вывод деревом (... используется редко)

git help revesions # Справка по заданию коммитов и диапазонов (git diff отличается, смысл ".." "..." отличается от всего)


6.4 Git – Просмотр – Вывод git log коммитов, меняющих нужный файл

git log index.html # Вывод списка коммитов меняющих указанный файл
git log -p script.js # Вывод списка коммитов меняющих указанный файл с выводом изминений
git log --follow script.js # Вывод списка коммитов меняющих указанный файл --follow для вывода в том числе фалов которые были переименованы

6.5 Git – Просмотр – Поиск в истории, фильтры для git log

git log --grep end # Вывод коммитов содержащих в описании "end", c учетом текущей ветки
git log --grep add features # Вывод коммитов содержащих в описании "add" в ветке "features"
git log --grep add --grep end # Вывод коммитов содержащих в описании "add" или "end"
git log --grep add --grep git --all-match # Вывод коммитов содержащих в описании "add" и "end"
# git в поиске --grep использует регулярные выражения старого формата, если нужно Perl совместимые то нужно добавить -P или git config --global grep.patternType perl (для сохранения Perl совместимых выражений по умолчанию)
git log --grep end -i # Вывод коммитов содержащих в описании "end" без учета регистра
git log -GsayHi -p # Вывод изминений в которых встречается sayHi

# +++ см видео еще для некоторых тонкостей


6.6 Git – Просмотр – Кто написал эту строку? git blame

git blame index.html
git blame index.html --date=short

7.1 Git – Слияние – "Истинное" слияние и разрешение конфликтов в git merge

git diff --name-only master features
git merge-base master features # Вывод общего коммита от которого пошло разделение
git merge features # Слия ние текущей ветки с ветки features